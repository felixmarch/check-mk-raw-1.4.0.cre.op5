--- rrdtool-1.5.4/src/rrd_daemon.c	2015-08-09 17:18:19.000000000 +0200
+++ /tmp/rrd_daemon.c	2016-06-08 09:19:41.777985850 +0200
@@ -193,6 +193,7 @@
   double last_update_stamp;
 #define CI_FLAGS_IN_TREE  (1<<0)
 #define CI_FLAGS_IN_QUEUE (1<<1)
+#define CI_FLAGS_SUSPENDED (1<<2)
   int flags;
   pthread_cond_t  flushed;
   cache_item_t *prev;
@@ -920,7 +921,8 @@
     return FALSE;
 
   if (ci->values_num > 0
-      && (ci->last_flush_time <= cfd->abs_timeout || state != RUNNING))
+      && (ci->last_flush_time <= cfd->abs_timeout || state != RUNNING)
+      && ((ci->flags & CI_FLAGS_SUSPENDED) == 0))
   {
     enqueue_cache_item (ci, TAIL);
   }
@@ -1242,8 +1244,8 @@
     return (ENOENT);
   }
 
-  if (ci->values_num > 0)
-  {
+  if ((ci->values_num > 0)
+      && ((ci->flags & CI_FLAGS_SUSPENDED) == 0)) {
     /* Enqueue at head */
     enqueue_cache_item (ci, HEAD);
     pthread_cond_wait(&ci->flushed, &cache_lock);
@@ -1634,6 +1636,7 @@
 
   if (((now - ci->last_flush_time) >= config_write_interval)
       && ((ci->flags & CI_FLAGS_IN_QUEUE) == 0)
+      && ((ci->flags & CI_FLAGS_SUSPENDED) == 0)
       && (ci->values_num > 0))
   {
     enqueue_cache_item (ci, TAIL);
@@ -2347,6 +2350,143 @@
   return rc;
 } /* }}} static int handle_request_create  */
 
+
+static cache_item_t *buffer_get_cache_item(listen_socket_t *sock, command_t *cmd, char **buffer, size_t *buffer_size, int *rc, char **file_name)
+{
+  char *pbuffile;
+  cache_item_t *ci = NULL;
+  int status;
+
+  *rc = 0;
+
+  /* obtain filename */
+  status = buffer_get_field(buffer, buffer_size, &pbuffile);
+  if (status != 0) {
+    *rc = syntax_error(sock, cmd);
+    goto done;
+  }
+  /* get full pathname */
+  *file_name = get_abs_path(pbuffile);
+  if (file_name == NULL) {
+    *rc = send_response(sock, RESP_ERR, "%s + %s\n", *file_name, rrd_strerror(ENOMEM));
+    goto done;
+  }
+
+  ci = g_tree_lookup(cache_tree, *file_name);
+
+  if (ci == NULL) {
+    *rc = send_response(sock, RESP_ERR, "%s - %s\n", *file_name, rrd_strerror(ENOENT));
+  }
+done:
+  return ci;
+}
+
+static int handle_request_suspend(HANDLER_PROTO) /* {{{ */
+{
+  char *file_name = NULL;
+  cache_item_t *ci;
+  int rc = -1;
+
+  ci = buffer_get_cache_item(sock, cmd, &buffer, &buffer_size, &rc, &file_name);
+
+  if (ci != NULL) {
+    if ((ci->flags & CI_FLAGS_SUSPENDED) == CI_FLAGS_SUSPENDED) {
+      rc = send_response(sock, RESP_OK, "%s already suspended\n", file_name);
+    } else {
+      ci->flags |= CI_FLAGS_SUSPENDED;
+      rc = send_response(sock, RESP_OK, "%s suspended\n", file_name);
+    }
+  }
+
+  free(file_name);
+  return rc;
+} /* }}} static int handle_request_suspend */
+
+static int handle_request_resume (HANDLER_PROTO) /* {{{ */
+{
+  char *file_name = NULL;
+  cache_item_t *ci;
+  int rc = -1;
+
+  ci = buffer_get_cache_item(sock, cmd, &buffer, &buffer_size, &rc, &file_name);
+
+  // buffer_get_cache_item has already written an error message
+  // in case of ci == NULL
+  if (ci != NULL) {
+    if ((ci->flags & CI_FLAGS_SUSPENDED) == 0) {
+      rc = send_response(sock, RESP_OK, "%s not suspended\n", file_name);
+    } else {
+      ci->flags &= ~CI_FLAGS_SUSPENDED;
+      rc = send_response(sock, RESP_OK, "%s resumed\n", file_name);
+    }
+  }
+
+  free(file_name);
+  return rc;
+} /* }}} static int handle_request_resume */
+
+
+static gboolean tree_callback_suspend (gpointer key, gpointer value, /* {{{ */
+    gpointer pointer)
+{
+  cache_item_t *ci;
+  int *count;
+
+  ci = (cache_item_t *) value;
+  count = (int*) pointer;
+
+  if ((ci->flags & CI_FLAGS_SUSPENDED) == 0) {
+    ci->flags |= CI_FLAGS_SUSPENDED;
+    *count += 1;
+  }
+
+
+  return (FALSE);
+} /* }}} gboolean tree_callback_suspend */
+
+
+static gboolean tree_callback_resume (gpointer key, gpointer value, /* {{{ */
+    gpointer pointer)
+{
+  cache_item_t *ci;
+  int *count;
+
+  ci = (cache_item_t *) value;
+  count = (int*) pointer;
+
+  if ((ci->flags & CI_FLAGS_SUSPENDED) != 0) {
+    ci->flags &= ~CI_FLAGS_SUSPENDED;
+    *count += 1;
+  }
+
+  return (FALSE);
+} /* }}} gboolean tree_callback_resume */
+
+
+static int handle_request_suspendall(HANDLER_PROTO) /* {{{ */
+{
+  int rc = -1;
+  int count = 0;
+
+  g_tree_foreach (cache_tree, tree_callback_suspend, (gpointer) &count);
+
+  rc = send_response(sock, RESP_OK, "%d rrds suspend\n", count);
+
+  return rc;
+} /* }}} static int handle_request_suspendall */
+
+
+static int handle_request_resumeall(HANDLER_PROTO) /* {{{ */
+{
+  int rc = -1;
+  int count = 0;
+
+  g_tree_foreach (cache_tree, tree_callback_resume, (gpointer) &count);
+
+  rc = send_response(sock, RESP_OK, "%d rrds resumed\n", count);
+  return rc;
+} /* }}} static int handle_request_resumeall */
+
 /* start "BATCH" processing */
 static int batch_start (HANDLER_PROTO) /* {{{ */
 {
@@ -2557,6 +2697,39 @@
     "The DS and RRA definitions are as for the 'rrdtool create' command.\n"
   },
   {
+    "SUSPEND",
+    handle_request_suspend,
+    CMD_CONTEXT_CLIENT | CMD_CONTEXT_BATCH,
+    "SUSPEND <filename>\n",
+    "The SUSPEND command will suspend writing to an RRD file. While a file is\n"
+    "suspended, all metrics for it are cached in memory until RESUME is called\n"
+    "for that file.\n"
+  },
+  {
+    "RESUME",
+    handle_request_resume,
+    CMD_CONTEXT_CLIENT | CMD_CONTEXT_BATCH,
+    "RESUME <filename>\n",
+    "The RESUME command will resume writing to an RRD file after SUSPEND stopped\n"
+    "that.\n"
+  },
+  {
+    "SUSPENDALL",
+    handle_request_suspendall,
+    CMD_CONTEXT_CLIENT | CMD_CONTEXT_BATCH,
+    "SUSPENDALL\n",
+    "The SUSPENDALL command will suspend writing to all RRD files. While\n"
+    "suspended, all metrics for all RRD files are cached in memory until\n"
+    "RESUME/RESUMEALL is called.\n"
+  },
+  {
+    "RESUMEALL",
+    handle_request_resumeall,
+    CMD_CONTEXT_CLIENT | CMD_CONTEXT_BATCH,
+    "RESUMEALL\n",
+    "The RESUMEALL command will resume writing to all RRD files previously suspended\n"
+  },
+  {
     "QUIT",
     handle_request_quit,
     CMD_CONTEXT_CLIENT | CMD_CONTEXT_BATCH,
